#!/usr/bin/env bash

set -e

readonly DOCKER_DIRECTORY=$(realpath $(dirname $(realpath $0)))
readonly VERSION_PATH=$DOCKER_DIRECTORY/../src/Version.php
readonly IMAGE_NAME="phpbenchmarks/benchmark-kit"

readonly MAJOR_VERSION=$(php -r "require('$VERSION_PATH'); echo App\Version::MAJOR;")
readonly MINOR_VERSION=$(php -r "require('$VERSION_PATH'); echo App\Version::MINOR;")
readonly PATCH_VERSION=$(php -r "require('$VERSION_PATH'); echo App\Version::PATCH;")

readonly IMAGE_PATCH_TAG=$IMAGE_NAME:$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION
readonly IMAGE_MINOR_TAG=$IMAGE_NAME:$MAJOR_VERSION.$MINOR_VERSION
readonly IMAGE_MAJOR_TAG=$IMAGE_NAME:$MAJOR_VERSION

readonly LOG_FILE="/tmp/benchmark-kit_build.log"

function rmLogFile() {
    if [ -f "$LOG_FILE" ]; then
        rm $LOG_FILE;
    fi
}

function onError() {
    if [ -f "$LOG_FILE" ]; then
        cat $LOG_FILE
        rmLogFile
    fi

    echo -e "\e[41m Error, build canceled. \e[0m"
}

trap onError ERR
rmLogFile

echo -n "Image to build: $IMAGE_PATCH_TAG? [Y/n] "
read validate
if [ "$validate" != "" ] && [ "$validate" != "y" ] && [ "$validate" != "y" ]; then
    exit 1
fi

dockerQuiet="-q"
dockerNoCache=""
push=false
for param in "$@"; do
    if [ "$param" == "-v" ]; then
        dockerQuiet=""
    elif [ "$param" == "--no-cache" ]; then
        dockerNoCache="--no-cache"
    elif [ "$param" == "--push" ]; then
        push=true
    fi
done

echo "Install Composer prod dependencies."
composer install --no-dev > $LOG_FILE 2>&1
rmLogFile

echo "Build image."
docker \
    build \
    $DOCKER_DIRECTORY/.. \
    --file=docker/Dockerfile \
    --tag=$IMAGE_PATCH_TAG \
    $dockerQuiet \
    $dockerNoCache
docker tag $IMAGE_PATCH_TAG $IMAGE_MINOR_TAG
docker tag $IMAGE_PATCH_TAG $IMAGE_MAJOR_TAG

if [ $push == true ]; then
    echo "Login to docker"
    docker logout > $LOG_FILE 2>&1
    rmLogFile
    docker login --username=phpbenchmarks

    echo "Push Docker image $IMAGE_PATCH_TAG."
    docker push $IMAGE_PATCH_TAG > $LOG_FILE 2>&1
    rmLogFile

    echo "Push Docker image $IMAGE_MINOR_TAG."
    docker push $IMAGE_MINOR_TAG > $LOG_FILE 2>&1
    rmLogFile

    echo "Push Docker imageh $IMAGE_MAJOR_TAG."
    docker push $IMAGE_MAJOR_TAG > $LOG_FILE 2>&1
    rmLogFile
fi

echo "Install Composer dev dependencie."
composer install > $LOG_FILE 2>&1
rmLogFile
